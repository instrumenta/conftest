// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/open-policy-agent/conftest/parser (interfaces: CustomConfigManager)

// Package parser is a generated GoMock package.
package parser

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCustomConfigManager is a mock of CustomConfigManager interface
type MockCustomConfigManager struct {
	ctrl     *gomock.Controller
	recorder *MockCustomConfigManagerMockRecorder
}

// MockCustomConfigManagerMockRecorder is the mock recorder for MockCustomConfigManager
type MockCustomConfigManagerMockRecorder struct {
	mock *MockCustomConfigManager
}

// NewMockCustomConfigManager creates a new mock instance
func NewMockCustomConfigManager(ctrl *gomock.Controller) *MockCustomConfigManager {
	mock := &MockCustomConfigManager{ctrl: ctrl}
	mock.recorder = &MockCustomConfigManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCustomConfigManager) EXPECT() *MockCustomConfigManagerMockRecorder {
	return m.recorder
}

// GetConfigurations mocks base method
func (m *MockCustomConfigManager) GetConfigurations(arg0 context.Context, arg1 string, arg2 []string) (map[string]interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfigurations", arg0, arg1, arg2)
	ret0, _ := ret[0].(map[string]interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfigurations indicates an expected call of GetConfigurations
func (mr *MockCustomConfigManagerMockRecorder) GetConfigurations(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfigurations", reflect.TypeOf((*MockCustomConfigManager)(nil).GetConfigurations), arg0, arg1, arg2)
}
